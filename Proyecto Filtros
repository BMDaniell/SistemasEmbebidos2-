/*
 * PROYECTO PRIMER PARCIAL
 * OBJETIVO: Adquirir componentes de sensores de forma simulada o emplear un
 *           conjunto de datos ya almacenados previamente. Con esto, se busca implementar los criterios de filtros
 *           FIR y algoritmos de suavizado de la señal para determinar cual de ellos es el adecuado.
 * Nombre: Daniel Benavides           
 * double ecg_100Hz
 * double flex_sensor
 */
// CONVOLUCION
// Tamaño de las señales
// Señal uno ECG
#define tam_sig1 600
#define tam_bajo1 21
//#define tam_alto1 21
//#define tam_banda1 27

//Señal dos cualquiera
#define tam_sig2 900

// importar la señal ECG desde un archivo .h
extern int ecg_100Hz [tam_sig1];
extern int filtropasa_bajo[tam_bajo1];
//extern int filtropasa_alto [tam_alto1];
//extern int filtropasa_banda[tam_banda1];

 // importar la señal DOS desde un archivo .h
extern int flex_sensor [tam_sig2];
int output1[tam_sig1+tam_bajo1];
//int output2[tam_sig1+tam_alto1];
//int output3[tam_sig1+tam_banda1];
int output_suaviza[tam_sig1];// SEÑAL ECG
int output_suaviza2[tam_sig2]; // SEÑAL DOS 
void convolucion (int *sig_in1, int *sig_out1,int *imp1, int sig1_tam, int bajo1_tam); //definicion de funcion
void moving_average (int *sig_in1, int *output_suaviza, int sig1_tam,int filter);
void moving_average (int *sig_in2, int *output_suaviza2, int sig2_tam,int filter);

void plot_signal(void);
int k;
int dac;

void setup() {
  Serial.begin(9600);

}

void loop() {
  convolucion((int*)&ecg_100Hz ,(int *)&output1[0],(int *)&filtropasa_bajo[0],(int)tam_sig1,(int) tam_bajo1);
  moving_average ((int*)&ecg_100Hz, (int *)&output_suaviza[0],(int) tam_sig1,11);
  for (k=0;k<tam_sig1;k++){
    dac=map(ecg_100Hz[k],0,600,0,255);
    analogWrite(6,dac);
    delay(5);
    int dac3=map(output_suaviza[k],0,800,0,255);
    analogWrite(4,dac3);
    }
  
    
}

///////////////////////FILTROS FIR///////////////////
void convolucion (int *sig_in1, int *sig_out1,int *imp1, int sig1_tam, int bajo1_tam){ // convolucion 
  int i,j;
  for (i=0;i<(sig1_tam+bajo1_tam);i++){ // poner ceros a vector de salida
    sig_out1[i]=0;
    }
    for(i=0;i<sig1_tam;i++){
      for(j=0;j<bajo1_tam;j++){
        sig_out1[i+j]=sig_in1[i+j]+sig_in1[i]*imp1[j];
        }
      }
  }

/////////////SUAVIZADO DE LA SEÑAL///////////////////////////////////////////////////////////////////  
void moving_average (int *sig_in1, int *output_suaviza, int sig1_tam,int filter){
int i,j;
for (i=floor(filter/2);i<sig1_tam-floor(filter/2)-1;i++){
  output_suaviza[i]=0;
  for(j=-floor(filter/2);j<floor(filter/2);j++){
     output_suaviza[i]=output_suaviza[i]+sig_in1[i+j];
  }
  output_suaviza[i]=output_suaviza[i]/filter;
   
  }
  
}

void plot_signal(void){ // graficar el resultado
  int i;
  for (i=0;i<tam_sig1;i++){
    Serial.print(ecg_100Hz[i]+5);
    Serial.print(",");
    Serial.println(output1[i]);
    int dac2=map(output1[i],0,600,0,255);
    analogWrite(7,dac2);
    delay(5);
    }
  } 
  
